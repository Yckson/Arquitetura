$date
	Sat Feb  8 01:31:19 2025
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module Processor_testbench $end
$var reg 1 ! clk $end
$var reg 1 " reset $end
$var integer 32 # iterator [31:0] $end
$var integer 32 $ iterator2 [31:0] $end
$scope module uut $end
$var wire 1 % PCSrc $end
$var wire 1 ! clk $end
$var wire 1 " reset $end
$var wire 32 & writeData [31:0] $end
$var wire 32 ' waitingPCAddr [31:0] $end
$var wire 32 ( signExtended [31:0] $end
$var wire 1 ) regWrite $end
$var wire 1 * regDst $end
$var wire 32 + nextPC [31:0] $end
$var wire 1 , memWrite $end
$var wire 1 - memToReg $end
$var wire 1 . memRead $end
$var wire 26 / jumpIMM [25:0] $end
$var wire 32 0 jumpAddr_mid [31:0] $end
$var wire 1 1 jump $end
$var wire 32 2 instruction [31:0] $end
$var wire 32 3 extendedShifted [31:0] $end
$var wire 32 4 branchAddr [31:0] $end
$var wire 1 5 branch $end
$var wire 32 6 beqOrPCPlus4 [31:0] $end
$var wire 5 7 WriteRegister [4:0] $end
$var wire 5 8 ReadRegister2 [4:0] $end
$var wire 5 9 ReadRegister1 [4:0] $end
$var wire 32 : ReadData2 [31:0] $end
$var wire 32 ; ReadData1 [31:0] $end
$var wire 32 < RAMOut [31:0] $end
$var wire 2 = ALUop [1:0] $end
$var wire 32 > ALUinputB [31:0] $end
$var wire 1 ? ALUZero $end
$var wire 1 @ ALUSrc $end
$var wire 32 A ALUResult [31:0] $end
$var wire 4 B ALUOperation [3:0] $end
$var reg 32 C PC [31:0] $end
$scope module ADD4_0 $end
$var wire 32 D in [31:0] $end
$var wire 32 E out [31:0] $end
$upscope $end
$scope module ALU0 $end
$var wire 1 ? Zero $end
$var wire 32 F B [31:0] $end
$var wire 4 G ALUOperation [3:0] $end
$var wire 32 H A [31:0] $end
$var reg 32 I ALUResult [31:0] $end
$upscope $end
$scope module ALUControlUnit $end
$var wire 4 J ALUOperation [3:0] $end
$var wire 6 K funct [5:0] $end
$var wire 2 L ALUop [1:0] $end
$var reg 4 M funcaoIntermediaria [3:0] $end
$upscope $end
$scope module ControlUnit $end
$var wire 2 N ALUop [1:0] $end
$var wire 1 , memWrite $end
$var wire 6 O opCode [5:0] $end
$var wire 1 * regDst $end
$var wire 1 ) regWrite $end
$var wire 1 - memToReg $end
$var wire 1 . memRead $end
$var wire 1 1 jump $end
$var wire 1 5 branch $end
$var wire 1 @ ALUSrc $end
$var reg 1 @ r_ALUSrc $end
$var reg 2 P r_ALUop [1:0] $end
$var reg 1 5 r_branch $end
$var reg 1 1 r_jump $end
$var reg 1 . r_memRead $end
$var reg 1 - r_memToReg $end
$var reg 1 Q r_memWrite $end
$var reg 1 * r_regDst $end
$var reg 1 R r_regWrite $end
$upscope $end
$scope module RAM $end
$var wire 1 . MemRead $end
$var wire 1 , MemWrite $end
$var wire 32 S address [31:0] $end
$var wire 1 ! clk $end
$var wire 32 T writeData [31:0] $end
$var wire 32 U readData [31:0] $end
$upscope $end
$scope module adder32_0 $end
$var wire 32 V a [31:0] $end
$var wire 32 W sum [31:0] $end
$var wire 32 X b [31:0] $end
$upscope $end
$scope module instMem0 $end
$var wire 32 Y addr [31:0] $end
$var wire 32 Z instruction [31:0] $end
$var integer 32 [ i [31:0] $end
$upscope $end
$scope module mux0 $end
$var wire 5 \ rd [4:0] $end
$var wire 1 * regDst $end
$var wire 5 ] rt [4:0] $end
$var wire 5 ^ wReg [4:0] $end
$upscope $end
$scope module mux1 $end
$var wire 1 @ ALUSrc $end
$var wire 32 _ regData [31:0] $end
$var wire 32 ` instantData [31:0] $end
$var wire 32 a ALUData [31:0] $end
$upscope $end
$scope module mux2 $end
$var wire 1 % PCSrc $end
$var wire 32 b beqPC [31:0] $end
$var wire 32 c nextPC [31:0] $end
$var wire 32 d PCAddress [31:0] $end
$upscope $end
$scope module mux3 $end
$var wire 32 e ALUData [31:0] $end
$var wire 1 - memToReg $end
$var wire 32 f readData [31:0] $end
$var wire 32 g writeData [31:0] $end
$upscope $end
$scope module mux4 $end
$var wire 32 h beqPC [31:0] $end
$var wire 1 1 jump $end
$var wire 32 i jumpAddr [31:0] $end
$var wire 32 j PCAddress [31:0] $end
$upscope $end
$scope module regBank $end
$var wire 32 k ReadData1 [31:0] $end
$var wire 32 l ReadData2 [31:0] $end
$var wire 5 m ReadRegister1 [4:0] $end
$var wire 5 n ReadRegister2 [4:0] $end
$var wire 1 ) RegWrite $end
$var wire 32 o WriteData [31:0] $end
$var wire 5 p WriteRegister [4:0] $end
$var wire 1 ! clk $end
$var wire 1 " reset $end
$var integer 32 q j [31:0] $end
$upscope $end
$scope module shift0 $end
$var wire 32 r out [31:0] $end
$var wire 32 s in [31:0] $end
$upscope $end
$scope module shift1 $end
$var wire 32 t in [31:0] $end
$var wire 32 u out [31:0] $end
$upscope $end
$scope module sigExt0 $end
$var wire 16 v in [15:0] $end
$var wire 32 w out [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module Processor_testbench $end
$var reg 32 x \regBankState[0] [31:0] $end
$upscope $end
$scope module Processor_testbench $end
$var reg 32 y \regBankState[1] [31:0] $end
$upscope $end
$scope module Processor_testbench $end
$var reg 32 z \regBankState[2] [31:0] $end
$upscope $end
$scope module Processor_testbench $end
$var reg 32 { \regBankState[3] [31:0] $end
$upscope $end
$scope module Processor_testbench $end
$var reg 32 | \regBankState[4] [31:0] $end
$upscope $end
$scope module Processor_testbench $end
$var reg 32 } \regBankState[5] [31:0] $end
$upscope $end
$scope module Processor_testbench $end
$var reg 32 ~ \regBankState[6] [31:0] $end
$upscope $end
$scope module Processor_testbench $end
$var reg 32 !" \regBankState[7] [31:0] $end
$upscope $end
$scope module Processor_testbench $end
$var reg 32 "" \regBankState[8] [31:0] $end
$upscope $end
$scope module Processor_testbench $end
$var reg 32 #" \regBankState[9] [31:0] $end
$upscope $end
$scope module Processor_testbench $end
$var reg 32 $" \regBankState[10] [31:0] $end
$upscope $end
$scope module Processor_testbench $end
$var reg 32 %" \regBankState[11] [31:0] $end
$upscope $end
$scope module Processor_testbench $end
$var reg 32 &" \regBankState[12] [31:0] $end
$upscope $end
$scope module Processor_testbench $end
$var reg 32 '" \regBankState[13] [31:0] $end
$upscope $end
$scope module Processor_testbench $end
$var reg 32 (" \regBankState[14] [31:0] $end
$upscope $end
$scope module Processor_testbench $end
$var reg 32 )" \regBankState[15] [31:0] $end
$upscope $end
$scope module Processor_testbench $end
$var reg 32 *" \regBankState[16] [31:0] $end
$upscope $end
$scope module Processor_testbench $end
$var reg 32 +" \regBankState[17] [31:0] $end
$upscope $end
$scope module Processor_testbench $end
$var reg 32 ," \regBankState[18] [31:0] $end
$upscope $end
$scope module Processor_testbench $end
$var reg 32 -" \regBankState[19] [31:0] $end
$upscope $end
$scope module Processor_testbench $end
$var reg 32 ." \regBankState[20] [31:0] $end
$upscope $end
$scope module Processor_testbench $end
$var reg 32 /" \regBankState[21] [31:0] $end
$upscope $end
$scope module Processor_testbench $end
$var reg 32 0" \regBankState[22] [31:0] $end
$upscope $end
$scope module Processor_testbench $end
$var reg 32 1" \regBankState[23] [31:0] $end
$upscope $end
$scope module Processor_testbench $end
$var reg 32 2" \regBankState[24] [31:0] $end
$upscope $end
$scope module Processor_testbench $end
$var reg 32 3" \regBankState[25] [31:0] $end
$upscope $end
$scope module Processor_testbench $end
$var reg 32 4" \regBankState[26] [31:0] $end
$upscope $end
$scope module Processor_testbench $end
$var reg 32 5" \regBankState[27] [31:0] $end
$upscope $end
$scope module Processor_testbench $end
$var reg 32 6" \regBankState[28] [31:0] $end
$upscope $end
$scope module Processor_testbench $end
$var reg 32 7" \regBankState[29] [31:0] $end
$upscope $end
$scope module Processor_testbench $end
$var reg 32 8" \regBankState[30] [31:0] $end
$upscope $end
$scope module Processor_testbench $end
$var reg 32 9" \regBankState[31] [31:0] $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
$end
#0
$dumpvars
bx 9"
bx 8"
bx 7"
bx 6"
bx 5"
bx 4"
bx 3"
bx 2"
bx 1"
bx 0"
bx /"
bx ."
bx -"
bx ,"
bx +"
bx *"
bx )"
bx ("
bx '"
bx &"
bx %"
bx $"
bx #"
bx ""
bx !"
bx ~
bx }
bx |
bx {
bx z
bx y
bx x
b101 w
b101 v
b1001000000000000010100 u
b10010000000000000101 t
b101 s
b10100 r
b100000 q
b1001 p
b101 o
b1001 n
b0 m
b0 l
b0 k
b100 j
b1001000000000000010100 i
b100 h
b101 g
b0 f
b101 e
b100 d
b100 c
b11000 b
b101 a
b101 `
b0 _
b1001 ^
b1001 ]
b0 \
b100000000 [
b100000000010010000000000000101 Z
b0 Y
b10100 X
b11000 W
b100 V
b0 U
b0 T
b101 S
1R
0Q
b0 P
b1000 O
b0 N
b10 M
b0 L
b101 K
b10 J
b101 I
b0 H
b10 G
b101 F
b100 E
b0 D
b0 C
b10 B
b101 A
1@
0?
b101 >
b0 =
b0 <
b0 ;
b0 :
b0 9
b1001 8
b1001 7
b100 6
05
b11000 4
b10100 3
b100000000010010000000000000101 2
01
b1001000000000000010100 0
b10010000000000000101 /
0.
0-
0,
b100 +
0*
1)
b101 (
b100 '
b101 &
0%
b100000 $
bx #
1"
0!
$end
#10000
b100 &
b100 g
b100 o
b100 A
b100 I
b100 S
b100 e
b1010000000000000010000 i
b10000 3
b10000 X
b10000 r
b100 >
b100 F
b100 a
b1010 7
b1010 ^
b1010 p
b1010000000000000010000 0
b1010000000000000010000 u
b1000 '
b1000 j
b100 (
b100 `
b100 s
b100 w
b100 v
b100 K
b1010 ]
b10100000000000000100 t
b10100000000000000100 /
b1010 8
b1010 n
b1000 6
b1000 d
b1000 h
b100000000010100000000000000100 2
b100000000010100000000000000100 Z
b11000 4
b11000 W
b11000 b
b1000 +
b1000 E
b1000 V
b1000 c
b100 C
b100 D
b100 Y
b0 :
b0 T
b0 _
b0 l
b0 9"
b0 8"
b0 7"
b0 6"
b0 5"
b0 4"
b0 3"
b0 2"
b0 1"
b0 0"
b0 /"
b0 ."
b0 -"
b0 ,"
b0 +"
b0 *"
b0 )"
b0 ("
b0 '"
b0 &"
b0 %"
b0 $"
b0 #"
b0 ""
b0 !"
b0 ~
b0 }
b0 |
b0 {
b0 z
b0 y
b0 x
b100000 #
1!
0"
#20000
0!
#30000
b110 B
b110 G
b110 J
b110 M
b1 =
b1 L
b1 N
b1 P
15
0)
0R
0@
b100101010000000000000000100 i
b1 &
b1 g
b1 o
b100 3
b100 X
b100 r
b100 >
b100 F
b100 a
b100101010000000000000000100 0
b100101010000000000000000100 u
b1 A
b1 I
b1 S
b1 e
b1100 '
b1100 j
b1 (
b1 `
b1 s
b1 w
b1 v
b1 K
b100 O
b1001010100000000000000001 t
b1001010100000000000000001 /
b101 ;
b101 H
b101 k
b1001 9
b1001 m
b1100 6
b1100 d
b1100 h
b10001001010100000000000000001 2
b10001001010100000000000000001 Z
b100 :
b100 T
b100 _
b100 l
b10000 4
b10000 W
b10000 b
b1100 +
b1100 E
b1100 V
b1100 c
b1000 C
b1000 D
b1000 Y
b0 9"
b0 8"
b0 7"
b0 6"
b0 5"
b0 4"
b0 3"
b0 2"
b0 1"
b0 0"
b0 /"
b0 ."
b0 -"
b0 ,"
b0 +"
b0 *"
b0 )"
b0 ("
b0 '"
b0 &"
b0 %"
b0 $"
b101 #"
b0 ""
b0 !"
b0 ~
b0 }
b0 |
b0 {
b0 z
b0 y
b0 x
b100000 #
1!
#40000
0!
#50000
b10 B
b10 G
b10 J
b10 M
11
b0 =
b0 L
b0 N
b0 P
05
0%
1?
b11000 i
b0 &
b0 g
b0 o
b11000 3
b11000 X
b11000 r
b0 7
b0 ^
b0 p
b11000 0
b11000 u
b0 >
b0 F
b0 a
b0 A
b0 I
b0 S
b0 e
b11000 '
b11000 j
b110 (
b110 `
b110 s
b110 w
b110 v
b110 K
b0 ]
b10 O
b110 t
b110 /
b0 :
b0 T
b0 _
b0 l
b0 8
b0 n
b0 ;
b0 H
b0 k
b0 9
b0 m
b10000 6
b10000 d
b10000 h
b1000000000000000000000000110 2
b1000000000000000000000000110 Z
b101000 4
b101000 W
b101000 b
b10000 +
b10000 E
b10000 V
b10000 c
b1100 C
b1100 D
b1100 Y
b0 9"
b0 8"
b0 7"
b0 6"
b0 5"
b0 4"
b0 3"
b0 2"
b0 1"
b0 0"
b0 /"
b0 ."
b0 -"
b0 ,"
b0 +"
b0 *"
b0 )"
b0 ("
b0 '"
b0 &"
b0 %"
b100 $"
b101 #"
b0 ""
b0 !"
b0 ~
b0 }
b0 |
b0 {
b0 z
b0 y
b0 x
b100000 #
1!
#60000
0!
#70000
0?
b1000 &
b1000 g
b1000 o
b1000 A
b1000 I
b1000 S
b1000 e
b1000 >
b1000 F
b1000 a
01
1)
1R
1@
b11100 '
b11100 j
b10000000000000000100000 i
b100000 3
b100000 X
b100000 r
b10000 7
b10000 ^
b10000 p
b10000000000000000100000 0
b10000000000000000100000 u
b1000 (
b1000 `
b1000 s
b1000 w
b1000 v
b1000 K
b10000 ]
b1000 O
b100000000000000001000 t
b100000000000000001000 /
b10000 8
b10000 n
b11100 6
b11100 d
b11100 h
b100000000100000000000000001000 2
b100000000100000000000000001000 Z
b111100 4
b111100 W
b111100 b
b11100 +
b11100 E
b11100 V
b11100 c
b11000 C
b11000 D
b11000 Y
b0 9"
b0 8"
b0 7"
b0 6"
b0 5"
b0 4"
b0 3"
b0 2"
b0 1"
b0 0"
b0 /"
b0 ."
b0 -"
b0 ,"
b0 +"
b0 *"
b0 )"
b0 ("
b0 '"
b0 &"
b0 %"
b100 $"
b101 #"
b0 ""
b0 !"
b0 ~
b0 }
b0 |
b0 {
b0 z
b0 y
b0 x
b100000 #
1!
#80000
0!
#90000
1?
b0 &
b0 g
b0 o
b0 A
b0 I
b0 S
b0 e
b0 >
b0 F
b0 a
11
0)
0R
0@
b100000 i
b0 7
b0 ^
b0 p
b100000 0
b100000 u
b100000 '
b100000 j
b0 ]
b10 O
b1000 t
b1000 /
b0 8
b0 n
b100000 6
b100000 d
b100000 h
b1000000000000000000000001000 2
b1000000000000000000000001000 Z
b1000000 4
b1000000 W
b1000000 b
b100000 +
b100000 E
b100000 V
b100000 c
b11100 C
b11100 D
b11100 Y
b0 :
b0 T
b0 _
b0 l
b0 9"
b0 8"
b0 7"
b0 6"
b0 5"
b0 4"
b0 3"
b0 2"
b0 1"
b0 0"
b0 /"
b0 ."
b0 -"
b0 ,"
b0 +"
b0 *"
b0 )"
b0 ("
b0 '"
b0 &"
b0 %"
b100 $"
b101 #"
b0 ""
b0 !"
b0 ~
b0 }
b0 |
b0 {
b0 z
b0 y
b0 x
b100000 #
1!
#100000
0!
#110000
b10 =
b10 L
b10 N
b10 P
01
1)
1R
1*
b100100 '
b100100 j
b0 i
b0 3
b0 X
b0 r
b0 0
b0 u
b0 (
b0 `
b0 s
b0 w
b0 v
b0 K
b0 O
b0 t
b0 /
b100100 6
b100100 d
b100100 h
b0 2
b0 Z
b100100 4
b100100 W
b100100 b
b100100 +
b100100 E
b100100 V
b100100 c
b100000 C
b100000 D
b100000 Y
b0 9"
b0 8"
b0 7"
b0 6"
b0 5"
b0 4"
b0 3"
b0 2"
b0 1"
b0 0"
b0 /"
b0 ."
b0 -"
b0 ,"
b0 +"
b1000 *"
b0 )"
b0 ("
b0 '"
b0 &"
b0 %"
b100 $"
b101 #"
b0 ""
b0 !"
b0 ~
b0 }
b0 |
b0 {
b0 z
b0 y
b0 x
b100000 #
1!
#120000
0!
#130000
b101000 '
b101000 j
b101000 6
b101000 d
b101000 h
b101000 4
b101000 W
b101000 b
b101000 +
b101000 E
b101000 V
b101000 c
b100100 C
b100100 D
b100100 Y
b0 9"
b0 8"
b0 7"
b0 6"
b0 5"
b0 4"
b0 3"
b0 2"
b0 1"
b0 0"
b0 /"
b0 ."
b0 -"
b0 ,"
b0 +"
b1000 *"
b0 )"
b0 ("
b0 '"
b0 &"
b0 %"
b100 $"
b101 #"
b0 ""
b0 !"
b0 ~
b0 }
b0 |
b0 {
b0 z
b0 y
b0 x
b100000 #
1!
#140000
0!
#150000
b101100 '
b101100 j
b101100 6
b101100 d
b101100 h
b101100 4
b101100 W
b101100 b
b101100 +
b101100 E
b101100 V
b101100 c
b101000 C
b101000 D
b101000 Y
b0 9"
b0 8"
b0 7"
b0 6"
b0 5"
b0 4"
b0 3"
b0 2"
b0 1"
b0 0"
b0 /"
b0 ."
b0 -"
b0 ,"
b0 +"
b1000 *"
b0 )"
b0 ("
b0 '"
b0 &"
b0 %"
b100 $"
b101 #"
b0 ""
b0 !"
b0 ~
b0 }
b0 |
b0 {
b0 z
b0 y
b0 x
b100000 #
1!
#160000
0!
#170000
b110000 '
b110000 j
b110000 6
b110000 d
b110000 h
b110000 4
b110000 W
b110000 b
b110000 +
b110000 E
b110000 V
b110000 c
b101100 C
b101100 D
b101100 Y
b0 9"
b0 8"
b0 7"
b0 6"
b0 5"
b0 4"
b0 3"
b0 2"
b0 1"
b0 0"
b0 /"
b0 ."
b0 -"
b0 ,"
b0 +"
b1000 *"
b0 )"
b0 ("
b0 '"
b0 &"
b0 %"
b100 $"
b101 #"
b0 ""
b0 !"
b0 ~
b0 }
b0 |
b0 {
b0 z
b0 y
b0 x
b100000 #
1!
#180000
0!
#190000
b110100 '
b110100 j
b110100 6
b110100 d
b110100 h
b110100 4
b110100 W
b110100 b
b110100 +
b110100 E
b110100 V
b110100 c
b110000 C
b110000 D
b110000 Y
b0 9"
b0 8"
b0 7"
b0 6"
b0 5"
b0 4"
b0 3"
b0 2"
b0 1"
b0 0"
b0 /"
b0 ."
b0 -"
b0 ,"
b0 +"
b1000 *"
b0 )"
b0 ("
b0 '"
b0 &"
b0 %"
b100 $"
b101 #"
b0 ""
b0 !"
b0 ~
b0 }
b0 |
b0 {
b0 z
b0 y
b0 x
b100000 #
1!
#200000
0!
#210000
